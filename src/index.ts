import UareU from './modules';
import * as ref from 'ref-napi';
import { DPFPDD_IMAGE_FMT, DPFPDD_IMAGE_PROC, DPFJ_FMD_FORMAT } from './modules/handlers/types/constant/constant.handler';
import Fmd from './modules/interfaces/fmd';

const uareu = UareU.getInstance();
let fmdList: Fmd[] = [];
let reader: any;

// let fmdFromBank: Fmd = {
//     size: 440,
//     fmdType: DPFJ_FMD_FORMAT.DPFJ_FMD_ANSI_378_2004,
//     data: Buffer.from([0x46, 0x4d, 0x52, 0x00, 0x20, 0x32, 0x30, 0x00, 0x01, 0xb8, 0x00, 0x33, 0xfe, 0xff, 0x00, 0x00, 0x01, 0x65, 0x01, 0x88, 0x00, 0xc5, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x00, 0x56, 0x44, 0x41, 0x02, 0x00, 0x6c, 0x41, 0x63, 0x40, 0x81, 0x01, 0x66, 0x19, 0x62, 0x80, 0x7e, 0x01, 0x18, 0x7a, 0x61, 0x80, 0x8b, 0x01, 0x44, 0x1f, 0x61, 0x40, 0x67, 0x00, 0x84, 0x20, 0x5d, 0x80, 0x6c, 0x01, 0x3a, 0x1f, 0x5c, 0x40, 0xf3, 0x01, 0x29, 0x37, 0x5a, 0x40, 0x50, 0x01, 0x5d, 0x19, 0x59, 0x40, 0xeb, 0x01, 0x4c, 0x3c, 0x57, 0x80, 0xdd, 0x01, 0x19, 0x38, 0x57, 0x80, 0xb2, 0x01, 0x1e, 0x83, 0x57, 0x40, 0x33, 0x00, 0xee, 0x22, 0x54, 0x40, 0xbf, 0x00, 0x3c, 0x58, 0x54, 0x40, 0xd4, 0x00, 0xb0, 0x46, 0x54, 0x40, 0x7a, 0x00, 0xca, 0x7c, 0x53, 0x40, 0x97, 0x01, 0x5f, 0x11, 0x50, 0x40, 0x96, 0x00, 0xc1, 0x1f, 0x4f, 0x80, 0xce, 0x00, 0xaf, 0x4e, 0x4e, 0x41, 0x18, 0x01, 0x3e, 0x3c, 0x4e, 0x41, 0x0b, 0x00, 0xdd, 0x3a, 0x4d, 0x80, 0x6c, 0x00, 0xec, 0x22, 0x4d, 0x80, 0x91, 0x00, 0x8a, 0x17, 0x4b, 0x80, 0xce, 0x01, 0x0c, 0x94, 0x4b, 0x80, 0xae, 0x01, 0x2b, 0x78, 0x4b, 0x41, 0x1a, 0x01, 0x29, 0x98, 0x4a, 0x80, 0xad, 0x00, 0x87, 0x64, 0x49, 0x40, 0xa7, 0x01, 0x58, 0x00, 0x49, 0x40, 0xbe, 0x01, 0x49, 0x48, 0x45, 0x80, 0xf0, 0x00, 0xc7, 0x3c, 0x44, 0x40, 0xa3, 0x00, 0xfe, 0x23, 0x44, 0x80, 0x33, 0x00, 0xd2, 0x7e, 0x43, 0x80, 0xc7, 0x00, 0xff, 0x8c, 0x43, 0x40, 0xb4, 0x01, 0x0f, 0x7f, 0x43, 0x80, 0xbc, 0x00, 0xff, 0x89, 0x3f, 0x80, 0x48, 0x01, 0x13, 0x1e, 0x3d, 0x40, 0xcf, 0x00, 0xf6, 0x94, 0x39, 0x40, 0x28, 0x00, 0xc7, 0x78, 0x38, 0x40, 0x9b, 0x00, 0x93, 0x0f, 0x38, 0x40, 0xbe, 0x00, 0x98, 0xa0, 0x38, 0x80, 0xc2, 0x01, 0x6d, 0x58, 0x38, 0x81, 0x18, 0x00, 0x6d, 0x9d, 0x36, 0x80, 0xc4, 0x00, 0xd2, 0x70, 0x36, 0x40, 0xe4, 0x01, 0x71, 0x44, 0x36, 0x40, 0xb4, 0x01, 0x72, 0x57, 0x36, 0x80, 0xca, 0x00, 0xf1, 0x96, 0x35, 0x00, 0xa7, 0x00, 0x89, 0x11, 0x34, 0x00, 0x9c, 0x00, 0x8a, 0x09, 0x33, 0x00, 0xb1, 0x01, 0x35, 0x83, 0x33, 0x00, 0xb8, 0x01, 0x72, 0x5a, 0x31, 0x00, 0xc3, 0x00, 0xf6, 0x2f, 0x31, 0x00, 0xbd, 0x00, 0xf7, 0x82, 0x31, 0x00, 0xa3, 0x01, 0x72, 0x00, 0x31, 0x00, 0x60, 0x01, 0x73, 0x17, 0x31, 0x00, 0xbd, 0x00, 0xd6, 0x78, 0x2f, 0x00, 0x2d, 0x01, 0x39, 0x73, 0x2f, 0x00, 0x27, 0x00, 0xb0, 0x78, 0x2e, 0x00, 0xb2, 0x01, 0x09, 0x8d, 0x2e, 0x00, 0x90, 0x01, 0x72, 0x08, 0x2e, 0x00, 0xb6, 0x01, 0x36, 0x8c, 0x2d, 0x00, 0x6c, 0x01, 0x73, 0x17, 0x2c, 0x00, 0x2c, 0x00, 0xd5, 0x7a, 0x2b, 0x00, 0x77, 0x01, 0x73, 0x13, 0x2b, 0x00, 0xc3, 0x00, 0xdc, 0x9b, 0x2b, 0x00, 0xb1, 0x01, 0x3c, 0x82, 0x2b, 0x01, 0x17, 0x00, 0x67, 0x95, 0x2a, 0x01, 0x2b, 0x00, 0x94, 0x99, 0x2a, 0x00, 0x27, 0x00, 0xc2, 0x7a, 0x2a, 0x01, 0x31, 0x00, 0xab, 0x99, 0x29, 0x00, 0x00])
// };

uareu.loadLibs().then(() => {
    return uareu.dpfpddInit();
}).then((res) => {
    return uareu.dpfpddQueryDevices();
}).then((res) => {
    return uareu.dpfpddOpen(res.devicesList[0]);
}).then((res) => {
    reader = res;
    return uareu.dpfpddCaptureAsync(reader, DPFPDD_IMAGE_FMT.DPFPDD_IMG_FMT_ANSI381, DPFPDD_IMAGE_PROC.DPFPDD_IMG_PROC_DEFAULT, (context, reserved, dataSize, data) => {
        uareu.dpfjCreateFmdFromFid(data, dataSize, DPFJ_FMD_FORMAT.DPFJ_FMD_ANSI_378_2004)
            .then(async (res) => {
                if (fmdList.length <= 2) {
                    fmdList.push(res);
                    return 1;
                } else {
                    return uareu.dpfjIdentify(res, fmdList);
                }
            })
            .then((res) => {
                console.log(res);
            })
            .catch((err) => {
                console.log(err);
            });
    });

}).then((res) => {
    const TEMPO = 60;
    setTimeout(() => {
        console.log(`Deu ${TEMPO} seg`);
    }, 1000 * TEMPO);
}).then((res) => {
    console.log(res);
}).catch((err) => {
    console.log(err);
});